using StardewModdingAPI;using StardewModdingAPI.Events;using StardewValley;using MyChildCore.Utilities;using System;using System.Collections.Generic;using System.Linq; // 권장using GenericModConfigMenu;#region GMCM 인터페이스public interface IGenericModConfigMenuApi{    void Register(IManifest mod, Action reset, Action save, bool titleScreenOnly = false);    void AddSectionTitle(IManifest mod, Func<string> text, Func<string> tooltip = null);    void AddDropdown(        IManifest mod,        Func<string> name,        Func<string> tooltip,        Func<string> getValue,        Action<string> setValue,        Func<IEnumerable<string>> allowedValues,        Func<string, string> format = null    );    // 필요한 함수만 최소로 추가}#endregionnamespace MyChildCore{    public class ModEntry : Mod    {        public static DropdownConfig Config;        private int lastSyncedDay = -1; // 외부저장소 폴링용        public override void Entry(IModHelper helper)        {            Config = new DropdownConfig();            // GMCM 연동 (Generic Mod Config Menu가 있을 때만)            var gmcm = helper.ModRegistry.GetApi<IGenericModConfigMenuApi>("spacechase0.GenericModConfigMenu");            if (gmcm != null)            {                gmcm.Register(                    this.ModManifest,                    reset: () => Config = new DropdownConfig(),                    save: () => { /* 필요시 직접 저장 구현 */ }                );                // 배우자별/자녀성별 옵션 드롭다운 반복등록                foreach (var spouse in DropdownConfig.SpouseNames)                {                    if (!Config.SpouseConfigs.ContainsKey(spouse))                        Config.SpouseConfigs[spouse] = new SpouseChildConfig();                    // === 여아 ===                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 여아 헤어",                        tooltip: () => "딸(여아)의 헤어 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.GirlHairStyle ?? "CherryTwin",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].GirlHairStyle = v; OnGMCMChanged(spouse, false); } },                        allowedValues: () => DropdownConfig.GirlHairStyles                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 여아 치마",                        tooltip: () => "딸(여아)의 치마 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.GirlSkirt ?? "Skirt_01",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].GirlSkirt = v; OnGMCMChanged(spouse, false); } },                        allowedValues: () => DropdownConfig.SkirtOptions                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 여아 신발",                        tooltip: () => "딸(여아)의 신발 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.GirlShoes ?? "Shoes_01",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].GirlShoes = v; OnGMCMChanged(spouse, false); } },                        allowedValues: () => DropdownConfig.ShoesOptions                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 여아 넥칼라",                        tooltip: () => "딸(여아)의 넥칼라 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.GirlNeckCollar ?? "NeckCollar_01",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].GirlNeckCollar = v; OnGMCMChanged(spouse, false); } },                        allowedValues: () => DropdownConfig.NeckCollarOptions                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 여아 잠옷",                        tooltip: () => "딸(여아)의 잠옷 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.GirlPajamaStyle ?? "Frog",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].GirlPajamaStyle = v; OnGMCMChanged(spouse, false); } },                        allowedValues: () => DropdownConfig.PajamaStyles                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 여아 잠옷색상",                        tooltip: () => "딸(여아)의 잠옷 색상(번호)",                        getValue: () => (Config.SpouseConfigs[spouse]?.GirlPajamaColorIndex ?? 1).ToString(),                        setValue: v => {                            if (Config.SpouseConfigs.ContainsKey(spouse) && int.TryParse(v, out var idx)) {                                var max = DropdownConfig.PajamaColorMax[Config.SpouseConfigs[spouse].GirlPajamaStyle];                                Config.SpouseConfigs[spouse].GirlPajamaColorIndex = Math.Clamp(idx, 1, max);                                OnGMCMChanged(spouse, false);                            }                        },                        allowedValues: () => {                            var max = DropdownConfig.PajamaColorMax[Config.SpouseConfigs[spouse].GirlPajamaStyle];                            return Enumerable.Range(1, max).Select(x => x.ToString()).ToArray();                        }                    );                    // === 남아 ===                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 남아 바지",                        tooltip: () => "아들(남아)의 바지 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.BoyPants ?? "Pants_01",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].BoyPants = v; OnGMCMChanged(spouse, true); } },                        allowedValues: () => DropdownConfig.PantsOptions                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 남아 신발",                        tooltip: () => "아들(남아)의 신발 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.BoyShoes ?? "Shoes_01",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].BoyShoes = v; OnGMCMChanged(spouse, true); } },                        allowedValues: () => DropdownConfig.ShoesOptions                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 남아 넥칼라",                        tooltip: () => "아들(남아)의 넥칼라 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.BoyNeckCollar ?? "NeckCollar_01",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].BoyNeckCollar = v; OnGMCMChanged(spouse, true); } },                        allowedValues: () => DropdownConfig.NeckCollarOptions                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 남아 잠옷",                        tooltip: () => "아들(남아)의 잠옷 스타일",                        getValue: () => Config.SpouseConfigs[spouse]?.BoyPajamaStyle ?? "Frog",                        setValue: v => { if (Config.SpouseConfigs.ContainsKey(spouse)) { Config.SpouseConfigs[spouse].BoyPajamaStyle = v; OnGMCMChanged(spouse, true); } },                        allowedValues: () => DropdownConfig.PajamaStyles                    );                    gmcm.AddDropdown(                        this.ModManifest,                        name: () => $"{spouse} 남아 잠옷색상",                        tooltip: () => "아들(남아)의 잠옷 색상(번호)",                        getValue: () => (Config.SpouseConfigs[spouse]?.BoyPajamaColorIndex ?? 1).ToString(),                        setValue: v => {                            if (Config.SpouseConfigs.ContainsKey(spouse) && int.TryParse(v, out var idx)) {                                var max = DropdownConfig.PajamaColorMax[Config.SpouseConfigs[spouse].BoyPajamaStyle];                                Config.SpouseConfigs[spouse].BoyPajamaColorIndex = Math.Clamp(idx, 1, max);                                OnGMCMChanged(spouse, true);                            }                        },                        allowedValues: () => {                            var max = DropdownConfig.PajamaColorMax[Config.SpouseConfigs[spouse].BoyPajamaStyle];                            return Enumerable.Range(1, max).Select(x => x.ToString()).ToArray();                        }                    );                }            }            // 저장 불러오기 시 자동 외형 적용            helper.Events.GameLoop.SaveLoaded += OnSaveLoaded;            helper.Events.GameLoop.DayStarted += OnDayStarted;            helper.Events.Player.Warped += OnWarped;            helper.Events.Display.MenuChanged += OnMenuChanged;            helper.Events.GameLoop.Saved += OnSaved;            // 외부저장소 주기적 폴링 (하루 1회)            helper.Events.GameLoop.OneSecondUpdateTicked += OnOneSecondUpdateTicked;            // 콘솔 명령어(테스트/백업/복구)            helper.ConsoleCommands.Add("applychild", "모든 자녀 외형 일괄 적용", ApplyAllChildren);            helper.ConsoleCommands.Add("backupchild", "자녀 데이터 백업", BackupChildren);            helper.ConsoleCommands.Add("restorechild", "자녀 백업 복구", RestoreChildren);        }        // ===== 이벤트 핸들러 =====        private void OnSaveLoaded(object sender, SaveLoadedEventArgs e)            => DataManager.ApplyAllAppearances(Config);        private void OnDayStarted(object sender, DayStartedEventArgs e)        {            DataManager.ApplyAllAppearances(Config);            lastSyncedDay = Game1.Date.TotalDays;        }        private void OnWarped(object sender, WarpedEventArgs e)        {            if (Context.IsMainPlayer && e.IsLocalPlayer)                DataManager.ApplyAllAppearances(Config);        }        private void OnMenuChanged(object sender, MenuChangedEventArgs e)        {            if (Context.IsWorldReady)                DataManager.ApplyAllAppearances(Config);        }        private void OnSaved(object sender, SavedEventArgs e)            => DataManager.ApplyAllAppearances(Config);        private void OnOneSecondUpdateTicked(object sender, EventArgs e)        {            if (Game1.Date.TotalDays != lastSyncedDay)            {                DataManager.SyncFromDisk();                lastSyncedDay = Game1.Date.TotalDays;                CustomLogger.Info("외부 저장소와 동기화 완료");            }        }        // GMCM 옵션 변경 시 개별 적용 (엔트리 콜백)        public static void OnGMCMChanged(string spouse, bool isMale)        {            AppearanceManager.ApplyForGMCMChange(spouse, isMale, Config);            CustomLogger.Info($"GMCM 변경: {spouse}, {(isMale ? "남" : "여")} 즉시 반영");        }        // 콘솔 명령어        private void ApplyAllChildren(string cmd, string[] args)        {            DataManager.ApplyAllAppearances(Config);            CustomLogger.Info("모든 자녀 외형 일괄 적용 완료!");        }        private void BackupChildren(string cmd, string[] args)        {            DataManager.Backup();            CustomLogger.Info("자녀 데이터 백업 완료!");        }        private void RestoreChildren(string cmd, string[] args)        {            DataManager.RestoreLatestBackup();            DataManager.ApplyAllAppearances(Config);            CustomLogger.Info("자녀 데이터 백업 복구 및 적용 완료!");        }    }}