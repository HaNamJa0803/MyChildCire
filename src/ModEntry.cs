using StardewModdingAPI;using StardewModdingAPI.Events;using StardewModdingAPI.Utilities;using GenericModConfigMenu;using StardewValley;using System;using System.Collections.Generic;namespace MyChildCore{    public class ModEntry : Mod    {        public static ModConfig Config;        private static int lastSyncedDay = -1;        public override void Entry(IModHelper helper)        {            Config = new ModConfig();            // GMCM 연동(직접)            helper.Events.GameLoop.GameLaunched += OnGameLaunched;            // 게임 이벤트 등록            helper.Events.GameLoop.SaveLoaded   += OnSaveLoaded;            helper.Events.GameLoop.DayStarted   += OnDayStarted;            helper.Events.Player.Warped         += OnWarped;            helper.Events.Display.MenuChanged   += OnMenuChanged;            helper.Events.GameLoop.Saved        += OnSaved;            helper.Events.GameLoop.OneSecondUpdateTicked += OnOneSecondUpdateTicked;            // 콘솔 명령 등록            helper.ConsoleCommands.Add("applychild", "모든 자녀 외형 일괄 적용", ApplyAllChildren);            helper.ConsoleCommands.Add("backupchild", "자녀 데이터 백업", BackupChildren);            helper.ConsoleCommands.Add("restorechild", "자녀 백업 복구", RestoreChildren);        }        private void OnGameLaunched(object sender, GameLaunchedEventArgs e)        {            var gmcm = Helper.ModRegistry.GetApi<IGenericModConfigMenuApi>("spacechase0.GenericModConfigMenu");            if (gmcm == null)            {                Monitor.Log("GMCM 연동 실패! GMCM 설치 여부 확인", LogLevel.Warn);                return;            }            gmcm.Register(                mod: ModManifest,                reset: () => Config = new ModConfig(),                save: () => { }            );            // === 배우자별 섹션 + 옵션 반복 등록 ===            foreach (var spouse in DropdownConfig.SpouseNames)            {                     gmcm.AddSectionTitle(                      mod: ModManifest,                      text: () => Helper.Translation.Get($"section.spouse.{spouse}"),                      tooltip: () => null                 );                 foreach (var opt in GMCMOptionsMenus.GMCMOptions)                 {                      gmcm.AddTextOption(                           mod: ModManifest,                           name: () => Helper.Translation.Get(opt.NameKey),                           tooltip: () => Helper.Translation.Get(opt.TooltipKey),                           getValue: () => opt.GetValue(spouse),                           setValue: v => { opt.SetValue(spouse, v); OnGMCMChanged(spouse, opt.IsBoy); },                           allowedValues: () => opt.AllowedValues(spouse)                      );                  }              }            // === 글로벌(공통) 옵션(활성화/비활성화) ===            gmcm.AddBoolOption(                mod: ModManifest,                name: () => Helper.Translation.Get("option.enable_mod"),                tooltip: () => Helper.Translation.Get("tooltip.enable_mod"),                getValue: () => Config.EnableMod,                setValue: v => Config.EnableMod = v            );            gmcm.AddBoolOption(                mod: ModManifest,                name: () => Helper.Translation.Get("option.enable_pajama"),                tooltip: () => Helper.Translation.Get("tooltip.enable_pajama"),                getValue: () => Config.EnablePajama,                setValue: v => Config.EnablePajama = v            );            gmcm.AddBoolOption(                mod: ModManifest,                name: () => Helper.Translation.Get("option.enable_festival"),                tooltip: () => Helper.Translation.Get("tooltip.enable_festival"),                getValue: () => Config.EnableFestival,                setValue: v => Config.EnableFestival = v            );        }        // === 게임 이벤트 ===        private void OnSaveLoaded(object sender, SaveLoadedEventArgs e)        {            DataManager.ApplyAllAppearances(Config);        }        private void OnDayStarted(object sender, DayStartedEventArgs e)        {            DataManager.ApplyAllAppearances(Config);            lastSyncedDay = Game1.Date.TotalDays;        }        private void OnWarped(object sender, WarpedEventArgs e)        {            if (Context.IsMainPlayer && e.IsLocalPlayer)                DataManager.ApplyAllAppearances(Config);        }        private void OnMenuChanged(object sender, MenuChangedEventArgs e)        {            if (Context.IsWorldReady)                DataManager.ApplyAllAppearances(Config);        }        private void OnSaved(object sender, SavedEventArgs e)        {            DataManager.ApplyAllAppearances(Config);        }        private void OnOneSecondUpdateTicked(object sender, EventArgs e)        {            if (Game1.Date.TotalDays != lastSyncedDay)            {                DataManager.SyncFromDisk();                lastSyncedDay = Game1.Date.TotalDays;                CustomLogger.Info("외부 저장소와 동기화 완료");            }        }        // === 콘솔 명령어 ===        private static void ApplyAllChildren(string cmd, string[] args)            => DataManager.ApplyAllAppearances(Config);        private static void BackupChildren(string cmd, string[] args)            => DataManager.Backup();        private static void RestoreChildren(string cmd, string[] args)        {            DataManager.RestoreLatestBackup();            DataManager.ApplyAllAppearances(Config);        }        // === GMCM 옵션 변경 콜백 ===        public static void OnGMCMChanged(string spouse, bool isBoy)        {            AppearanceManager.ApplyForGMCMChange(spouse, isBoy, Config);            DataManager.SaveData(CacheManager.GetChildCache());        }    }}