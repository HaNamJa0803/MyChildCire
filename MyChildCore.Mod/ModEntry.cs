using HarmonyLib;using System.Linq;using StardewModdingAPI;using StardewValley;using StardewValley.Characters;using MyChildCore.Utilities; // 유틸리티 DLL 참조namespace MyChildCore.Mod{    public class ModEntry : Mod    {        public static ModEntry Instance { get; private set; }        private Harmony _harmony;        public override void Entry(IModHelper helper)        {            Instance = this;            CustomLogger.Init(Monitor);            // 저장/불러오기, 캐시, 외형 자동 동기화            helper.Events.GameLoop.SaveLoaded += (s, e) => SyncAndApply();            helper.Events.GameLoop.DayStarted += (s, e) => SyncAndApply();            helper.Events.Player.Warped += (s, e) => SyncAndApply();            // Harmony 패치: Child.reloadSprite(외형 리셋), draw(랜더링), dayUpdate 등 원하는 메서드            _harmony = new Harmony(ModManifest.UniqueID);            _harmony.Patch(                original: AccessTools.Method(typeof(Child), nameof(Child.reloadSprite)),                postfix: new HarmonyMethod(typeof(ModEntry), nameof(AfterChildSpriteUpdate))            );        }        /// <summary>        /// 캐시-외부저장소-외형 싱크/적용        /// </summary>        private void SyncAndApply()        {            CacheManager.LoadAllFromJson(); // JSON → 캐시            var myChild = ChildManager.GetMyFirstChild();            if (myChild == null)            {                CustomLogger.Warn("내 자녀가 없습니다.");                return;            }            // 외형 데이터가 있으면 적용, 없으면 기본값 (확장성)            var data = CacheManager.GetMyChildData(myChild);            if (data != null && !string.IsNullOrEmpty(data.AppearanceKey))            {                AppearanceManager.ApplyAppearance(myChild, data.AppearanceKey);                CustomLogger.Info($"[{myChild.Name}] 외형 자동 적용: {data.AppearanceKey}");            }            else            {                // 기본값/예외처리                AppearanceManager.ApplyAppearance(myChild, "assets/baby.png");                CustomLogger.Warn($"[{myChild?.Name}] 외형 정보 없음, 기본값 적용!");            }        }        /// <summary>        /// 하모니 후킹: Child.reloadSprite마다 외형 자동 재적용!        /// </summary>        public static void AfterChildSpriteUpdate(Child __instance)        {            var myChild = ChildManager.GetMyFirstChild();            if (myChild != null && __instance.Name == myChild.Name && __instance.idOfParent.Value == myChild.idOfParent.Value)            {                // 저장된 AppearanceKey 자동 재적용(없으면 기본값)                var data = CacheManager.GetMyChildData(myChild);                if (data != null && !string.IsNullOrEmpty(data.AppearanceKey))                {                    AppearanceManager.ApplyAppearance(__instance, data.AppearanceKey);                }                else                {                    AppearanceManager.ApplyAppearance(__instance, "assets/baby.png");                }            }        }    }}